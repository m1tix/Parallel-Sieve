#!/usr/bin/env python3
import sys
from math import ceil, sqrt


def sieve_eratosthenes(n):
    '''
    Generates primes <= n with sieve of eratosthenes
    '''
    # prime_list is a list of booleans: index n is true if and only if
    # n is prime.
    n = (n - 1, n)[n % 2]
    prime_list = [0] + [1] * (n // 2)
    for i in range(3, ceil(sqrt(n)) + 1, 2):
        if prime_list[i // 2]:
            for j in range(i**2, n + 1, 2 * i):
                prime_list[j // 2] = 0
    return prime_list


if __name__ == "__main__":
    n = sys.argv[1]
    lis = sieve_eratosthenes(int(n))
    # for m, isprime in enumerate(lis):
    #     if isprime:
    #         print(2 * m + 1)

